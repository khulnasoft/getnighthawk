// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: api/client/options.proto

package nighthawk_client

import (
	reflect "reflect"
	sync "sync"

	v3 "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
	v32 "github.com/envoyproxy/go-control-plane/envoy/config/metrics/v3"
	v31 "github.com/envoyproxy/go-control-plane/envoy/extensions/transport_sockets/tls/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddressFamily_AddressFamilyOptions int32

const (
	AddressFamily_AUTO AddressFamily_AddressFamilyOptions = 0
	AddressFamily_V4   AddressFamily_AddressFamilyOptions = 1
	AddressFamily_V6   AddressFamily_AddressFamilyOptions = 2
)

// Enum value maps for AddressFamily_AddressFamilyOptions.
var (
	AddressFamily_AddressFamilyOptions_name = map[int32]string{
		0: "AUTO",
		1: "V4",
		2: "V6",
	}
	AddressFamily_AddressFamilyOptions_value = map[string]int32{
		"AUTO": 0,
		"V4":   1,
		"V6":   2,
	}
)

func (x AddressFamily_AddressFamilyOptions) Enum() *AddressFamily_AddressFamilyOptions {
	p := new(AddressFamily_AddressFamilyOptions)
	*p = x
	return p
}

func (x AddressFamily_AddressFamilyOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddressFamily_AddressFamilyOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_api_client_options_proto_enumTypes[0].Descriptor()
}

func (AddressFamily_AddressFamilyOptions) Type() protoreflect.EnumType {
	return &file_api_client_options_proto_enumTypes[0]
}

func (x AddressFamily_AddressFamilyOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddressFamily_AddressFamilyOptions.Descriptor instead.
func (AddressFamily_AddressFamilyOptions) EnumDescriptor() ([]byte, []int) {
	return file_api_client_options_proto_rawDescGZIP(), []int{3, 0}
}

type Verbosity_VerbosityOptions int32

const (
	Verbosity_DEFAULT  Verbosity_VerbosityOptions = 0
	Verbosity_INFO     Verbosity_VerbosityOptions = 1
	Verbosity_TRACE    Verbosity_VerbosityOptions = 2
	Verbosity_DEBUG    Verbosity_VerbosityOptions = 3
	Verbosity_WARN     Verbosity_VerbosityOptions = 4
	Verbosity_ERROR    Verbosity_VerbosityOptions = 5
	Verbosity_CRITICAL Verbosity_VerbosityOptions = 6
)

// Enum value maps for Verbosity_VerbosityOptions.
var (
	Verbosity_VerbosityOptions_name = map[int32]string{
		0: "DEFAULT",
		1: "INFO",
		2: "TRACE",
		3: "DEBUG",
		4: "WARN",
		5: "ERROR",
		6: "CRITICAL",
	}
	Verbosity_VerbosityOptions_value = map[string]int32{
		"DEFAULT":  0,
		"INFO":     1,
		"TRACE":    2,
		"DEBUG":    3,
		"WARN":     4,
		"ERROR":    5,
		"CRITICAL": 6,
	}
)

func (x Verbosity_VerbosityOptions) Enum() *Verbosity_VerbosityOptions {
	p := new(Verbosity_VerbosityOptions)
	*p = x
	return p
}

func (x Verbosity_VerbosityOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Verbosity_VerbosityOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_api_client_options_proto_enumTypes[1].Descriptor()
}

func (Verbosity_VerbosityOptions) Type() protoreflect.EnumType {
	return &file_api_client_options_proto_enumTypes[1]
}

func (x Verbosity_VerbosityOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Verbosity_VerbosityOptions.Descriptor instead.
func (Verbosity_VerbosityOptions) EnumDescriptor() ([]byte, []int) {
	return file_api_client_options_proto_rawDescGZIP(), []int{4, 0}
}

type OutputFormat_OutputFormatOptions int32

const (
	OutputFormat_DEFAULT                      OutputFormat_OutputFormatOptions = 0
	OutputFormat_JSON                         OutputFormat_OutputFormatOptions = 1
	OutputFormat_HUMAN                        OutputFormat_OutputFormatOptions = 2
	OutputFormat_YAML                         OutputFormat_OutputFormatOptions = 3
	OutputFormat_DOTTED                       OutputFormat_OutputFormatOptions = 4
	OutputFormat_FORTIO                       OutputFormat_OutputFormatOptions = 5
	OutputFormat_EXPERIMENTAL_FORTIO_PEDANTIC OutputFormat_OutputFormatOptions = 6
)

// Enum value maps for OutputFormat_OutputFormatOptions.
var (
	OutputFormat_OutputFormatOptions_name = map[int32]string{
		0: "DEFAULT",
		1: "JSON",
		2: "HUMAN",
		3: "YAML",
		4: "DOTTED",
		5: "FORTIO",
		6: "EXPERIMENTAL_FORTIO_PEDANTIC",
	}
	OutputFormat_OutputFormatOptions_value = map[string]int32{
		"DEFAULT":                      0,
		"JSON":                         1,
		"HUMAN":                        2,
		"YAML":                         3,
		"DOTTED":                       4,
		"FORTIO":                       5,
		"EXPERIMENTAL_FORTIO_PEDANTIC": 6,
	}
)

func (x OutputFormat_OutputFormatOptions) Enum() *OutputFormat_OutputFormatOptions {
	p := new(OutputFormat_OutputFormatOptions)
	*p = x
	return p
}

func (x OutputFormat_OutputFormatOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OutputFormat_OutputFormatOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_api_client_options_proto_enumTypes[2].Descriptor()
}

func (OutputFormat_OutputFormatOptions) Type() protoreflect.EnumType {
	return &file_api_client_options_proto_enumTypes[2]
}

func (x OutputFormat_OutputFormatOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OutputFormat_OutputFormatOptions.Descriptor instead.
func (OutputFormat_OutputFormatOptions) EnumDescriptor() ([]byte, []int) {
	return file_api_client_options_proto_rawDescGZIP(), []int{5, 0}
}

type SequencerIdleStrategy_SequencerIdleStrategyOptions int32

const (
	SequencerIdleStrategy_DEFAULT SequencerIdleStrategy_SequencerIdleStrategyOptions = 0
	SequencerIdleStrategy_SPIN    SequencerIdleStrategy_SequencerIdleStrategyOptions = 1
	SequencerIdleStrategy_POLL    SequencerIdleStrategy_SequencerIdleStrategyOptions = 2
	SequencerIdleStrategy_SLEEP   SequencerIdleStrategy_SequencerIdleStrategyOptions = 3
)

// Enum value maps for SequencerIdleStrategy_SequencerIdleStrategyOptions.
var (
	SequencerIdleStrategy_SequencerIdleStrategyOptions_name = map[int32]string{
		0: "DEFAULT",
		1: "SPIN",
		2: "POLL",
		3: "SLEEP",
	}
	SequencerIdleStrategy_SequencerIdleStrategyOptions_value = map[string]int32{
		"DEFAULT": 0,
		"SPIN":    1,
		"POLL":    2,
		"SLEEP":   3,
	}
)

func (x SequencerIdleStrategy_SequencerIdleStrategyOptions) Enum() *SequencerIdleStrategy_SequencerIdleStrategyOptions {
	p := new(SequencerIdleStrategy_SequencerIdleStrategyOptions)
	*p = x
	return p
}

func (x SequencerIdleStrategy_SequencerIdleStrategyOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SequencerIdleStrategy_SequencerIdleStrategyOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_api_client_options_proto_enumTypes[3].Descriptor()
}

func (SequencerIdleStrategy_SequencerIdleStrategyOptions) Type() protoreflect.EnumType {
	return &file_api_client_options_proto_enumTypes[3]
}

func (x SequencerIdleStrategy_SequencerIdleStrategyOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SequencerIdleStrategy_SequencerIdleStrategyOptions.Descriptor instead.
func (SequencerIdleStrategy_SequencerIdleStrategyOptions) EnumDescriptor() ([]byte, []int) {
	return file_api_client_options_proto_rawDescGZIP(), []int{6, 0}
}

type H1ConnectionReuseStrategy_H1ConnectionReuseStrategyOptions int32

const (
	H1ConnectionReuseStrategy_DEFAULT H1ConnectionReuseStrategy_H1ConnectionReuseStrategyOptions = 0
	H1ConnectionReuseStrategy_MRU     H1ConnectionReuseStrategy_H1ConnectionReuseStrategyOptions = 1
	H1ConnectionReuseStrategy_LRU     H1ConnectionReuseStrategy_H1ConnectionReuseStrategyOptions = 2
)

// Enum value maps for H1ConnectionReuseStrategy_H1ConnectionReuseStrategyOptions.
var (
	H1ConnectionReuseStrategy_H1ConnectionReuseStrategyOptions_name = map[int32]string{
		0: "DEFAULT",
		1: "MRU",
		2: "LRU",
	}
	H1ConnectionReuseStrategy_H1ConnectionReuseStrategyOptions_value = map[string]int32{
		"DEFAULT": 0,
		"MRU":     1,
		"LRU":     2,
	}
)

func (x H1ConnectionReuseStrategy_H1ConnectionReuseStrategyOptions) Enum() *H1ConnectionReuseStrategy_H1ConnectionReuseStrategyOptions {
	p := new(H1ConnectionReuseStrategy_H1ConnectionReuseStrategyOptions)
	*p = x
	return p
}

func (x H1ConnectionReuseStrategy_H1ConnectionReuseStrategyOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (H1ConnectionReuseStrategy_H1ConnectionReuseStrategyOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_api_client_options_proto_enumTypes[4].Descriptor()
}

func (H1ConnectionReuseStrategy_H1ConnectionReuseStrategyOptions) Type() protoreflect.EnumType {
	return &file_api_client_options_proto_enumTypes[4]
}

func (x H1ConnectionReuseStrategy_H1ConnectionReuseStrategyOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use H1ConnectionReuseStrategy_H1ConnectionReuseStrategyOptions.Descriptor instead.
func (H1ConnectionReuseStrategy_H1ConnectionReuseStrategyOptions) EnumDescriptor() ([]byte, []int) {
	return file_api_client_options_proto_rawDescGZIP(), []int{8, 0}
}

type Protocol_ProtocolOptions int32

const (
	// Encapsulate requests in HTTP/1.
	// This is the default option.
	Protocol_HTTP1 Protocol_ProtocolOptions = 0
	// Encapsulate requests in HTTP/2.
	Protocol_HTTP2 Protocol_ProtocolOptions = 1
	// Encapsulate requests in HTTP/3 Quic.
	//
	// Note that certificate verification for HTTP/3 Quic connections currently
	// cannot be skipped, make sure to include a host or an authority header
	// that will pass the SAN/SNI verification.
	// See https://github.com/envoyproxy/nighthawk/issues/727.
	Protocol_HTTP3 Protocol_ProtocolOptions = 2
)

// Enum value maps for Protocol_ProtocolOptions.
var (
	Protocol_ProtocolOptions_name = map[int32]string{
		0: "HTTP1",
		1: "HTTP2",
		2: "HTTP3",
	}
	Protocol_ProtocolOptions_value = map[string]int32{
		"HTTP1": 0,
		"HTTP2": 1,
		"HTTP3": 2,
	}
)

func (x Protocol_ProtocolOptions) Enum() *Protocol_ProtocolOptions {
	p := new(Protocol_ProtocolOptions)
	*p = x
	return p
}

func (x Protocol_ProtocolOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol_ProtocolOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_api_client_options_proto_enumTypes[5].Descriptor()
}

func (Protocol_ProtocolOptions) Type() protoreflect.EnumType {
	return &file_api_client_options_proto_enumTypes[5]
}

func (x Protocol_ProtocolOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol_ProtocolOptions.Descriptor instead.
func (Protocol_ProtocolOptions) EnumDescriptor() ([]byte, []int) {
	return file_api_client_options_proto_rawDescGZIP(), []int{9, 0}
}

// Allows for static configuration of requests that should be send by the load generator.
type RequestOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMethod  v3.RequestMethod        `protobuf:"varint,1,opt,name=request_method,json=requestMethod,proto3,enum=envoy.config.core.v3.RequestMethod" json:"request_method,omitempty"`
	RequestHeaders []*v3.HeaderValueOption `protobuf:"bytes,2,rep,name=request_headers,json=requestHeaders,proto3" json:"request_headers,omitempty"`
	// Our StreamDecoder depends on bounding the size here, so if this changes, an amendment
	// to that is needed as well.
	RequestBodySize *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=request_body_size,json=requestBodySize,proto3" json:"request_body_size,omitempty"`
}

func (x *RequestOptions) Reset() {
	*x = RequestOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_client_options_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestOptions) ProtoMessage() {}

func (x *RequestOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_client_options_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestOptions.ProtoReflect.Descriptor instead.
func (*RequestOptions) Descriptor() ([]byte, []int) {
	return file_api_client_options_proto_rawDescGZIP(), []int{0}
}

func (x *RequestOptions) GetRequestMethod() v3.RequestMethod {
	if x != nil {
		return x.RequestMethod
	}
	return v3.RequestMethod_METHOD_UNSPECIFIED
}

func (x *RequestOptions) GetRequestHeaders() []*v3.HeaderValueOption {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *RequestOptions) GetRequestBodySize() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RequestBodySize
	}
	return nil
}

// Used for providing multiple request options, especially for RequestSourcePlugins.
type RequestOptionsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Each option is used for a separate request to be sent by the requestSource.
	Options []*RequestOptions `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *RequestOptionsList) Reset() {
	*x = RequestOptionsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_client_options_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestOptionsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestOptionsList) ProtoMessage() {}

func (x *RequestOptionsList) ProtoReflect() protoreflect.Message {
	mi := &file_api_client_options_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestOptionsList.ProtoReflect.Descriptor instead.
func (*RequestOptionsList) Descriptor() ([]byte, []int) {
	return file_api_client_options_proto_rawDescGZIP(), []int{1}
}

func (x *RequestOptionsList) GetOptions() []*RequestOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// Configures a remote gRPC source that will deliver to-be-replayed request data to Nighthawks
// workers.
type RequestSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri string `protobuf:"bytes,19,opt,name=uri,proto3" json:"uri,omitempty"` // [(validate.rules).string.uri = true];
}

func (x *RequestSource) Reset() {
	*x = RequestSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_client_options_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestSource) ProtoMessage() {}

func (x *RequestSource) ProtoReflect() protoreflect.Message {
	mi := &file_api_client_options_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestSource.ProtoReflect.Descriptor instead.
func (*RequestSource) Descriptor() ([]byte, []int) {
	return file_api_client_options_proto_rawDescGZIP(), []int{2}
}

func (x *RequestSource) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

// We wrap all values so we can have a unified way of option handling with respect to
// defaults, merging, etc. As there's no stock concept for enumerations, we manually
// define custom wrappers for them. These used to be strings, which did provide the
// wrapped type.
type AddressFamily struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value AddressFamily_AddressFamilyOptions `protobuf:"varint,1,opt,name=value,proto3,enum=nighthawk.client.AddressFamily_AddressFamilyOptions" json:"value,omitempty"`
}

func (x *AddressFamily) Reset() {
	*x = AddressFamily{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_client_options_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressFamily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressFamily) ProtoMessage() {}

func (x *AddressFamily) ProtoReflect() protoreflect.Message {
	mi := &file_api_client_options_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressFamily.ProtoReflect.Descriptor instead.
func (*AddressFamily) Descriptor() ([]byte, []int) {
	return file_api_client_options_proto_rawDescGZIP(), []int{3}
}

func (x *AddressFamily) GetValue() AddressFamily_AddressFamilyOptions {
	if x != nil {
		return x.Value
	}
	return AddressFamily_AUTO
}

type Verbosity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value Verbosity_VerbosityOptions `protobuf:"varint,1,opt,name=value,proto3,enum=nighthawk.client.Verbosity_VerbosityOptions" json:"value,omitempty"`
}

func (x *Verbosity) Reset() {
	*x = Verbosity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_client_options_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Verbosity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Verbosity) ProtoMessage() {}

func (x *Verbosity) ProtoReflect() protoreflect.Message {
	mi := &file_api_client_options_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Verbosity.ProtoReflect.Descriptor instead.
func (*Verbosity) Descriptor() ([]byte, []int) {
	return file_api_client_options_proto_rawDescGZIP(), []int{4}
}

func (x *Verbosity) GetValue() Verbosity_VerbosityOptions {
	if x != nil {
		return x.Value
	}
	return Verbosity_DEFAULT
}

type OutputFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value OutputFormat_OutputFormatOptions `protobuf:"varint,1,opt,name=value,proto3,enum=nighthawk.client.OutputFormat_OutputFormatOptions" json:"value,omitempty"`
}

func (x *OutputFormat) Reset() {
	*x = OutputFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_client_options_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputFormat) ProtoMessage() {}

func (x *OutputFormat) ProtoReflect() protoreflect.Message {
	mi := &file_api_client_options_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputFormat.ProtoReflect.Descriptor instead.
func (*OutputFormat) Descriptor() ([]byte, []int) {
	return file_api_client_options_proto_rawDescGZIP(), []int{5}
}

func (x *OutputFormat) GetValue() OutputFormat_OutputFormatOptions {
	if x != nil {
		return x.Value
	}
	return OutputFormat_DEFAULT
}

type SequencerIdleStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value SequencerIdleStrategy_SequencerIdleStrategyOptions `protobuf:"varint,1,opt,name=value,proto3,enum=nighthawk.client.SequencerIdleStrategy_SequencerIdleStrategyOptions" json:"value,omitempty"`
}

func (x *SequencerIdleStrategy) Reset() {
	*x = SequencerIdleStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_client_options_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SequencerIdleStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerIdleStrategy) ProtoMessage() {}

func (x *SequencerIdleStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_api_client_options_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerIdleStrategy.ProtoReflect.Descriptor instead.
func (*SequencerIdleStrategy) Descriptor() ([]byte, []int) {
	return file_api_client_options_proto_rawDescGZIP(), []int{6}
}

func (x *SequencerIdleStrategy) GetValue() SequencerIdleStrategy_SequencerIdleStrategyOptions {
	if x != nil {
		return x.Value
	}
	return SequencerIdleStrategy_DEFAULT
}

type MultiTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to use HTTPS in requests to all backends; otherwise HTTP.
	UseHttps *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=use_https,json=useHttps,proto3" json:"use_https,omitempty"`
	// One or more address-port pairs to receive traffic distributed with round robin.
	Endpoints []*MultiTarget_Endpoint `protobuf:"bytes,2,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	// The absolute HTTP request path (the part of the URL after host:port, e.g. /x/y/z).
	// A single path is requested from all backends. Ignored when using a RequestSource.
	Path *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *MultiTarget) Reset() {
	*x = MultiTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_client_options_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiTarget) ProtoMessage() {}

func (x *MultiTarget) ProtoReflect() protoreflect.Message {
	mi := &file_api_client_options_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiTarget.ProtoReflect.Descriptor instead.
func (*MultiTarget) Descriptor() ([]byte, []int) {
	return file_api_client_options_proto_rawDescGZIP(), []int{7}
}

func (x *MultiTarget) GetUseHttps() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseHttps
	}
	return nil
}

func (x *MultiTarget) GetEndpoints() []*MultiTarget_Endpoint {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *MultiTarget) GetPath() *wrapperspb.StringValue {
	if x != nil {
		return x.Path
	}
	return nil
}

type H1ConnectionReuseStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value H1ConnectionReuseStrategy_H1ConnectionReuseStrategyOptions `protobuf:"varint,1,opt,name=value,proto3,enum=nighthawk.client.H1ConnectionReuseStrategy_H1ConnectionReuseStrategyOptions" json:"value,omitempty"`
}

func (x *H1ConnectionReuseStrategy) Reset() {
	*x = H1ConnectionReuseStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_client_options_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *H1ConnectionReuseStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*H1ConnectionReuseStrategy) ProtoMessage() {}

func (x *H1ConnectionReuseStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_api_client_options_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use H1ConnectionReuseStrategy.ProtoReflect.Descriptor instead.
func (*H1ConnectionReuseStrategy) Descriptor() ([]byte, []int) {
	return file_api_client_options_proto_rawDescGZIP(), []int{8}
}

func (x *H1ConnectionReuseStrategy) GetValue() H1ConnectionReuseStrategy_H1ConnectionReuseStrategyOptions {
	if x != nil {
		return x.Value
	}
	return H1ConnectionReuseStrategy_DEFAULT
}

type Protocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The protocol to encapsulate requests in.
	Value Protocol_ProtocolOptions `protobuf:"varint,1,opt,name=value,proto3,enum=nighthawk.client.Protocol_ProtocolOptions" json:"value,omitempty"`
}

func (x *Protocol) Reset() {
	*x = Protocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_client_options_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Protocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Protocol) ProtoMessage() {}

func (x *Protocol) ProtoReflect() protoreflect.Message {
	mi := &file_api_client_options_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Protocol.ProtoReflect.Descriptor instead.
func (*Protocol) Descriptor() ([]byte, []int) {
	return file_api_client_options_proto_rawDescGZIP(), []int{9}
}

func (x *Protocol) GetValue() Protocol_ProtocolOptions {
	if x != nil {
		return x.Value
	}
	return Protocol_HTTP1
}

// TODO(oschaaf): Ultimately this will be a load test specification. The fact that it
// can arrive via CLI is just a concrete detail. Change this to reflect that.
// Highest unused number is 109.
type CommandLineOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The target requests-per-second rate. Default: 5.
	RequestsPerSecond *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=requests_per_second,json=requestsPerSecond,proto3" json:"requests_per_second,omitempty"`
	// The maximum allowed number of concurrent connections per event loop. HTTP/1 only. Default: 100.
	Connections *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=connections,proto3" json:"connections,omitempty"`
	// Types that are assignable to OneofDurationOptions:
	//	*CommandLineOptions_Duration
	//	*CommandLineOptions_NoDuration
	OneofDurationOptions isCommandLineOptions_OneofDurationOptions `protobuf_oneof:"oneof_duration_options"`
	// Connection connect timeout period in seconds. Default: 30.
	Timeout *durationpb.Duration `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// The protocol to use when encapsulating requests.
	// Defaults to HTTP/1 if no value is selected.
	//
	// Types that are assignable to OneofProtocol:
	//	*CommandLineOptions_H2
	//	*CommandLineOptions_Protocol
	OneofProtocol isCommandLineOptions_OneofProtocol `protobuf_oneof:"oneof_protocol"`
	// The number of concurrent event loops that should be used. Specify 'auto' to let
	// Nighthawk leverage all vCPUs that have affinity to the Nighthawk process. Note that
	// increasing this results in an effective load multiplier combined with the configured
	// --rps and --connections values. Default: 1.
	Concurrency *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=concurrency,proto3" json:"concurrency,omitempty"` // [(validate.rules).string = {pattern: "^([0-9]*|auto)$"}];
	// Verbosity of the output. Possible values: [trace, debug, info, warn,
	// error, critical]. The default level is 'info'.
	Verbosity *Verbosity `protobuf:"bytes,7,opt,name=verbosity,proto3" json:"verbosity,omitempty"`
	// Output format. Possible values: {"json", "human", "yaml", "dotted",
	// "fortio"}. The default output format is 'human'.
	// NOTE: not relevant to gRPC service
	OutputFormat *OutputFormat `protobuf:"bytes,8,opt,name=output_format,json=outputFormat,proto3" json:"output_format,omitempty"`
	// Use proactive connection prefetching (HTTP/1 only).
	PrefetchConnections *wrapperspb.BoolValue `protobuf:"bytes,9,opt,name=prefetch_connections,json=prefetchConnections,proto3" json:"prefetch_connections,omitempty"`
	// Release requests in bursts of the specified size (default: 0).
	BurstSize *wrapperspb.UInt32Value `protobuf:"bytes,10,opt,name=burst_size,json=burstSize,proto3" json:"burst_size,omitempty"`
	// Network address family preference. Possible values: [auto, v4, v6]. The default output format
	// is 'AUTO'.
	AddressFamily *AddressFamily `protobuf:"bytes,11,opt,name=address_family,json=addressFamily,proto3" json:"address_family,omitempty"`
	// Either requests will be statically configured, or delivered through a remote gRPC service.
	//
	// Types that are assignable to OneofRequestOptions:
	//	*CommandLineOptions_RequestOptions
	//	*CommandLineOptions_RequestSource
	//	*CommandLineOptions_RequestSourcePluginConfig
	OneofRequestOptions isCommandLineOptions_OneofRequestOptions `protobuf_oneof:"oneof_request_options"`
	// DEPRECATED, use --transport-socket instead. Tls context configuration in json or compact yaml.
	// Mutually exclusive with --transport-socket.
	//
	// Deprecated: Do not use.
	TlsContext *v31.UpstreamTlsContext `protobuf:"bytes,13,opt,name=tls_context,json=tlsContext,proto3" json:"tls_context,omitempty"`
	// Max pending requests (default: 0, no client side queuing. Specifying any other value will allow
	// client-side queuing of requests).
	MaxPendingRequests *wrapperspb.UInt32Value `protobuf:"bytes,14,opt,name=max_pending_requests,json=maxPendingRequests,proto3" json:"max_pending_requests,omitempty"`
	// The maximum allowed number of concurrently active requests.
	// HTTP/2 and HTTP/3 only, does not apply to HTTP/1. (default: 100).
	MaxActiveRequests *wrapperspb.UInt32Value `protobuf:"bytes,15,opt,name=max_active_requests,json=maxActiveRequests,proto3" json:"max_active_requests,omitempty"`
	// Max requests per connection (default: 4294937295).
	MaxRequestsPerConnection *wrapperspb.UInt32Value `protobuf:"bytes,16,opt,name=max_requests_per_connection,json=maxRequestsPerConnection,proto3" json:"max_requests_per_connection,omitempty"`
	// Choose between using a busy spin/yield loop or have the thread poll or sleep while waiting for
	// the next scheduled request (default: SPIN).
	SequencerIdleStrategy *SequencerIdleStrategy `protobuf:"bytes,17,opt,name=sequencer_idle_strategy,json=sequencerIdleStrategy,proto3" json:"sequencer_idle_strategy,omitempty"`
	// Either a single URI is configured, or the same traffic can be spread across a static
	// set of backends.
	//
	// Types that are assignable to OneofUri:
	//	*CommandLineOptions_Uri
	//	*CommandLineOptions_MultiTarget
	OneofUri isCommandLineOptions_OneofUri `protobuf_oneof:"oneof_uri"`
	// Trace uri. Example: zipkin://localhost:9411/api/v2/spans. Default is empty.
	Trace *wrapperspb.StringValue `protobuf:"bytes,19,opt,name=trace,proto3" json:"trace,omitempty"` // [(validate.rules).string.uri = true];
	// Choose picking the most recently used, or least-recently-used connections for re-use.(default:
	// mru). WARNING: this option is experimental and may be removed or changed in the future!
	ExperimentalH1ConnectionReuseStrategy *H1ConnectionReuseStrategy `protobuf:"bytes,23,opt,name=experimental_h1_connection_reuse_strategy,json=experimentalH1ConnectionReuseStrategy,proto3" json:"experimental_h1_connection_reuse_strategy,omitempty"`
	// Termination predicate. Allows specifying a counter name plus threshold value for terminating
	// execution.
	TerminationPredicates map[string]uint64 `protobuf:"bytes,20,rep,name=termination_predicates,json=terminationPredicates,proto3" json:"termination_predicates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Allows specifying a counter name plus threshold value for failing execution. Defaults to not
	// tolerating error status codes and connection errors.
	FailurePredicates map[string]uint64 `protobuf:"bytes,24,rep,name=failure_predicates,json=failurePredicates,proto3" json:"failure_predicates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Enable open loop mode. When enabled, the benchmark client will not provide backpressure when
	// resource limits are hit.
	OpenLoop *wrapperspb.BoolValue `protobuf:"bytes,21,opt,name=open_loop,json=openLoop,proto3" json:"open_loop,omitempty"`
	// Add uniformly distributed absolute request-release timing jitter. For example, to add 10 us of
	// jitter, specify .00001s. Default is empty / no uniform jitter.
	JitterUniform *durationpb.Duration `protobuf:"bytes,25,opt,name=jitter_uniform,json=jitterUniform,proto3" json:"jitter_uniform,omitempty"`
	// Nighthawk service uri for running CLI in remote host mode. Example: grpc://localhost:8843/.
	// Default is empty.
	// NOTE: not relevant to gRPC service
	NighthawkService *wrapperspb.StringValue `protobuf:"bytes,31,opt,name=nighthawk_service,json=nighthawkService,proto3" json:"nighthawk_service,omitempty"` // [(validate.rules).string.uri = true];
	// DO NOT USE: This options is deprecated, if this behavior is desired, set
	// max_concurrent_streams to one instead.
	//
	// Deprecated: Do not use.
	ExperimentalH2UseMultipleConnections *wrapperspb.BoolValue `protobuf:"bytes,30,opt,name=experimental_h2_use_multiple_connections,json=experimentalH2UseMultipleConnections,proto3" json:"experimental_h2_use_multiple_connections,omitempty"`
	// The maximum concurrent streams allowed on one HTTP/2 or HTTP/3 connection.
	//
	// Does not apply to HTTP/1.
	// See https://httpwg.org/specs/rfc7540.html#rfc.section.5.1.2 for more
	// details.
	//
	// This limits how many streams Nighthawk will initiate concurrently on a
	// single connection. If the limit is reached, Nighthawk may queue requests or
	// use additional connections depending on the other configuration values.
	// E.g. setting this to 1 makes Nighthawk use a new connection for each
	// request. (default: 2147483647).
	MaxConcurrentStreams *wrapperspb.UInt32Value `protobuf:"bytes,108,opt,name=max_concurrent_streams,json=maxConcurrentStreams,proto3" json:"max_concurrent_streams,omitempty"`
	// Label. Allows specifying multiple labels which will be persisted in structured output formats.
	Labels []string `protobuf:"bytes,28,rep,name=labels,proto3" json:"labels,omitempty"`
	// TransportSocket configuration to use in every request
	TransportSocket *v3.TransportSocket `protobuf:"bytes,27,opt,name=transport_socket,json=transportSocket,proto3" json:"transport_socket,omitempty"`
	// Perform a simple single warmup request (per worker) before starting
	// execution. Note that this will be reflected in the counters that
	// Nighthawk writes to the output. Default is false.
	SimpleWarmup *wrapperspb.BoolValue `protobuf:"bytes,32,opt,name=simple_warmup,json=simpleWarmup,proto3" json:"simple_warmup,omitempty"`
	// Optional set of stat sinks where Nighthawk metrics will be flushed to.
	StatsSinks []*v32.StatsSink `protobuf:"bytes,34,rep,name=stats_sinks,json=statsSinks,proto3" json:"stats_sinks,omitempty"`
	// Time interval (number of seconds) between periodical flushes to configured stats sinks. If not
	// specified the default is 5 seconds. Time interval must be at least 1s and at most 300s.
	StatsFlushInterval *wrapperspb.UInt32Value `protobuf:"bytes,35,opt,name=stats_flush_interval,json=statsFlushInterval,proto3" json:"stats_flush_interval,omitempty"`
	// Set an optional header name that will be returned in responses, whose values will be tracked in
	// a latency histogram if set. Can be used in tandem with the test server's response option
	// "emit_previous_request_delta_in_response_header" to record elapsed time between request
	// arrivals.
	LatencyResponseHeaderName *wrapperspb.StringValue `protobuf:"bytes,36,opt,name=latency_response_header_name,json=latencyResponseHeaderName,proto3" json:"latency_response_header_name,omitempty"`
	// Provide an execution starting date and time. Optional, any value specified must be in the
	// future.
	ScheduledStart *timestamppb.Timestamp `protobuf:"bytes,105,opt,name=scheduled_start,json=scheduledStart,proto3" json:"scheduled_start,omitempty"`
	// Provide a unique execution id. Will be reflected in the output when set.
	// This is intended for future use in horizontally scaled scenarios in mind.
	// When populating this field, it is recommended to use unique identifiers for forward
	// compatibility purposes. In the future, this field may be auto-populated when left unset and
	// circumstances mandate so (distributed load test execution).
	ExecutionId *wrapperspb.StringValue `protobuf:"bytes,106,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
}

func (x *CommandLineOptions) Reset() {
	*x = CommandLineOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_client_options_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandLineOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandLineOptions) ProtoMessage() {}

func (x *CommandLineOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_client_options_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandLineOptions.ProtoReflect.Descriptor instead.
func (*CommandLineOptions) Descriptor() ([]byte, []int) {
	return file_api_client_options_proto_rawDescGZIP(), []int{10}
}

func (x *CommandLineOptions) GetRequestsPerSecond() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RequestsPerSecond
	}
	return nil
}

func (x *CommandLineOptions) GetConnections() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Connections
	}
	return nil
}

func (m *CommandLineOptions) GetOneofDurationOptions() isCommandLineOptions_OneofDurationOptions {
	if m != nil {
		return m.OneofDurationOptions
	}
	return nil
}

func (x *CommandLineOptions) GetDuration() *durationpb.Duration {
	if x, ok := x.GetOneofDurationOptions().(*CommandLineOptions_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *CommandLineOptions) GetNoDuration() *wrapperspb.BoolValue {
	if x, ok := x.GetOneofDurationOptions().(*CommandLineOptions_NoDuration); ok {
		return x.NoDuration
	}
	return nil
}

func (x *CommandLineOptions) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (m *CommandLineOptions) GetOneofProtocol() isCommandLineOptions_OneofProtocol {
	if m != nil {
		return m.OneofProtocol
	}
	return nil
}

// Deprecated: Do not use.
func (x *CommandLineOptions) GetH2() *wrapperspb.BoolValue {
	if x, ok := x.GetOneofProtocol().(*CommandLineOptions_H2); ok {
		return x.H2
	}
	return nil
}

func (x *CommandLineOptions) GetProtocol() *Protocol {
	if x, ok := x.GetOneofProtocol().(*CommandLineOptions_Protocol); ok {
		return x.Protocol
	}
	return nil
}

func (x *CommandLineOptions) GetConcurrency() *wrapperspb.StringValue {
	if x != nil {
		return x.Concurrency
	}
	return nil
}

func (x *CommandLineOptions) GetVerbosity() *Verbosity {
	if x != nil {
		return x.Verbosity
	}
	return nil
}

func (x *CommandLineOptions) GetOutputFormat() *OutputFormat {
	if x != nil {
		return x.OutputFormat
	}
	return nil
}

func (x *CommandLineOptions) GetPrefetchConnections() *wrapperspb.BoolValue {
	if x != nil {
		return x.PrefetchConnections
	}
	return nil
}

func (x *CommandLineOptions) GetBurstSize() *wrapperspb.UInt32Value {
	if x != nil {
		return x.BurstSize
	}
	return nil
}

func (x *CommandLineOptions) GetAddressFamily() *AddressFamily {
	if x != nil {
		return x.AddressFamily
	}
	return nil
}

func (m *CommandLineOptions) GetOneofRequestOptions() isCommandLineOptions_OneofRequestOptions {
	if m != nil {
		return m.OneofRequestOptions
	}
	return nil
}

func (x *CommandLineOptions) GetRequestOptions() *RequestOptions {
	if x, ok := x.GetOneofRequestOptions().(*CommandLineOptions_RequestOptions); ok {
		return x.RequestOptions
	}
	return nil
}

func (x *CommandLineOptions) GetRequestSource() *RequestSource {
	if x, ok := x.GetOneofRequestOptions().(*CommandLineOptions_RequestSource); ok {
		return x.RequestSource
	}
	return nil
}

func (x *CommandLineOptions) GetRequestSourcePluginConfig() *v3.TypedExtensionConfig {
	if x, ok := x.GetOneofRequestOptions().(*CommandLineOptions_RequestSourcePluginConfig); ok {
		return x.RequestSourcePluginConfig
	}
	return nil
}

// Deprecated: Do not use.
func (x *CommandLineOptions) GetTlsContext() *v31.UpstreamTlsContext {
	if x != nil {
		return x.TlsContext
	}
	return nil
}

func (x *CommandLineOptions) GetMaxPendingRequests() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxPendingRequests
	}
	return nil
}

func (x *CommandLineOptions) GetMaxActiveRequests() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxActiveRequests
	}
	return nil
}

func (x *CommandLineOptions) GetMaxRequestsPerConnection() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxRequestsPerConnection
	}
	return nil
}

func (x *CommandLineOptions) GetSequencerIdleStrategy() *SequencerIdleStrategy {
	if x != nil {
		return x.SequencerIdleStrategy
	}
	return nil
}

func (m *CommandLineOptions) GetOneofUri() isCommandLineOptions_OneofUri {
	if m != nil {
		return m.OneofUri
	}
	return nil
}

func (x *CommandLineOptions) GetUri() *wrapperspb.StringValue {
	if x, ok := x.GetOneofUri().(*CommandLineOptions_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *CommandLineOptions) GetMultiTarget() *MultiTarget {
	if x, ok := x.GetOneofUri().(*CommandLineOptions_MultiTarget); ok {
		return x.MultiTarget
	}
	return nil
}

func (x *CommandLineOptions) GetTrace() *wrapperspb.StringValue {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *CommandLineOptions) GetExperimentalH1ConnectionReuseStrategy() *H1ConnectionReuseStrategy {
	if x != nil {
		return x.ExperimentalH1ConnectionReuseStrategy
	}
	return nil
}

func (x *CommandLineOptions) GetTerminationPredicates() map[string]uint64 {
	if x != nil {
		return x.TerminationPredicates
	}
	return nil
}

func (x *CommandLineOptions) GetFailurePredicates() map[string]uint64 {
	if x != nil {
		return x.FailurePredicates
	}
	return nil
}

func (x *CommandLineOptions) GetOpenLoop() *wrapperspb.BoolValue {
	if x != nil {
		return x.OpenLoop
	}
	return nil
}

func (x *CommandLineOptions) GetJitterUniform() *durationpb.Duration {
	if x != nil {
		return x.JitterUniform
	}
	return nil
}

func (x *CommandLineOptions) GetNighthawkService() *wrapperspb.StringValue {
	if x != nil {
		return x.NighthawkService
	}
	return nil
}

// Deprecated: Do not use.
func (x *CommandLineOptions) GetExperimentalH2UseMultipleConnections() *wrapperspb.BoolValue {
	if x != nil {
		return x.ExperimentalH2UseMultipleConnections
	}
	return nil
}

func (x *CommandLineOptions) GetMaxConcurrentStreams() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxConcurrentStreams
	}
	return nil
}

func (x *CommandLineOptions) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CommandLineOptions) GetTransportSocket() *v3.TransportSocket {
	if x != nil {
		return x.TransportSocket
	}
	return nil
}

func (x *CommandLineOptions) GetSimpleWarmup() *wrapperspb.BoolValue {
	if x != nil {
		return x.SimpleWarmup
	}
	return nil
}

func (x *CommandLineOptions) GetStatsSinks() []*v32.StatsSink {
	if x != nil {
		return x.StatsSinks
	}
	return nil
}

func (x *CommandLineOptions) GetStatsFlushInterval() *wrapperspb.UInt32Value {
	if x != nil {
		return x.StatsFlushInterval
	}
	return nil
}

func (x *CommandLineOptions) GetLatencyResponseHeaderName() *wrapperspb.StringValue {
	if x != nil {
		return x.LatencyResponseHeaderName
	}
	return nil
}

func (x *CommandLineOptions) GetScheduledStart() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledStart
	}
	return nil
}

func (x *CommandLineOptions) GetExecutionId() *wrapperspb.StringValue {
	if x != nil {
		return x.ExecutionId
	}
	return nil
}

type isCommandLineOptions_OneofDurationOptions interface {
	isCommandLineOptions_OneofDurationOptions()
}

type CommandLineOptions_Duration struct {
	// The number of seconds that the test should run. Default: 5.
	Duration *durationpb.Duration `protobuf:"bytes,3,opt,name=duration,proto3,oneof"`
}

type CommandLineOptions_NoDuration struct {
	// Request infinite execution. Note that the default failure predicates will still be added..
	NoDuration *wrapperspb.BoolValue `protobuf:"bytes,33,opt,name=no_duration,json=noDuration,proto3,oneof"`
}

func (*CommandLineOptions_Duration) isCommandLineOptions_OneofDurationOptions() {}

func (*CommandLineOptions_NoDuration) isCommandLineOptions_OneofDurationOptions() {}

type isCommandLineOptions_OneofProtocol interface {
	isCommandLineOptions_OneofProtocol()
}

type CommandLineOptions_H2 struct {
	// Use HTTP/2 protocol.
	// This option is deprecated, set the protocol option instead.
	//
	// Deprecated: Do not use.
	H2 *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=h2,proto3,oneof"`
}

type CommandLineOptions_Protocol struct {
	// The protocol to use when encapsulating requests.
	Protocol *Protocol `protobuf:"bytes,107,opt,name=protocol,proto3,oneof"`
}

func (*CommandLineOptions_H2) isCommandLineOptions_OneofProtocol() {}

func (*CommandLineOptions_Protocol) isCommandLineOptions_OneofProtocol() {}

type isCommandLineOptions_OneofRequestOptions interface {
	isCommandLineOptions_OneofRequestOptions()
}

type CommandLineOptions_RequestOptions struct {
	// Static configuration to use on every outgoing request
	RequestOptions *RequestOptions `protobuf:"bytes,12,opt,name=request_options,json=requestOptions,proto3,oneof"`
}

type CommandLineOptions_RequestSource struct {
	// Remote gRPC source that will deliver to-be-replayed traffic. Each worker will separately
	// connect to this source.
	RequestSource *RequestSource `protobuf:"bytes,26,opt,name=request_source,json=requestSource,proto3,oneof"`
}

type CommandLineOptions_RequestSourcePluginConfig struct {
	// A plugin config that is to be parsed by a RequestSourcePluginConfigFactory and used to create
	// an in memory request source.
	RequestSourcePluginConfig *v3.TypedExtensionConfig `protobuf:"bytes,37,opt,name=request_source_plugin_config,json=requestSourcePluginConfig,proto3,oneof"`
}

func (*CommandLineOptions_RequestOptions) isCommandLineOptions_OneofRequestOptions() {}

func (*CommandLineOptions_RequestSource) isCommandLineOptions_OneofRequestOptions() {}

func (*CommandLineOptions_RequestSourcePluginConfig) isCommandLineOptions_OneofRequestOptions() {}

type isCommandLineOptions_OneofUri interface {
	isCommandLineOptions_OneofUri()
}

type CommandLineOptions_Uri struct {
	// URI to benchmark. http:// and https:// are supported, but in case of https no certificates
	// are validated. For benchmarking a single endpoint.
	Uri *wrapperspb.StringValue `protobuf:"bytes,18,opt,name=uri,proto3,oneof"` // [(validate.rules).string.uri = true];
}

type CommandLineOptions_MultiTarget struct {
	// Defines multiple URIs to benchmark
	MultiTarget *MultiTarget `protobuf:"bytes,29,opt,name=multi_target,json=multiTarget,proto3,oneof"`
}

func (*CommandLineOptions_Uri) isCommandLineOptions_OneofUri() {}

func (*CommandLineOptions_MultiTarget) isCommandLineOptions_OneofUri() {}

type MultiTarget_Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Port    *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *MultiTarget_Endpoint) Reset() {
	*x = MultiTarget_Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_client_options_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiTarget_Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiTarget_Endpoint) ProtoMessage() {}

func (x *MultiTarget_Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_api_client_options_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiTarget_Endpoint.ProtoReflect.Descriptor instead.
func (*MultiTarget_Endpoint) Descriptor() ([]byte, []int) {
	return file_api_client_options_proto_rawDescGZIP(), []int{7, 0}
}

func (x *MultiTarget_Endpoint) GetAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *MultiTarget_Endpoint) GetPort() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Port
	}
	return nil
}

var File_api_client_options_proto protoreflect.FileDescriptor

var file_api_client_options_proto_rawDesc = []byte{
	0x0a, 0x18, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6e, 0x69, 0x67, 0x68,
	0x74, 0x68, 0x61, 0x77, 0x6b, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x65,
	0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x76, 0x33, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2f, 0x74, 0x6c, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x63,
	0x65, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x6e, 0x76, 0x6f, 0x79,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x33, 0x2f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x50, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x54, 0x0a, 0x11, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x2a, 0x05, 0x18, 0x80, 0x80, 0x80, 0x02, 0x52, 0x0f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x50, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x68, 0x61,
	0x77, 0x6b, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x21, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x69, 0x22, 0x8d, 0x01, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x68, 0x61, 0x77,
	0x6b, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x30, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55,
	0x54, 0x4f, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x34, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02,
	0x56, 0x36, 0x10, 0x02, 0x22, 0xb3, 0x01, 0x0a, 0x09, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69,
	0x74, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x68, 0x61, 0x77, 0x6b, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x2e, 0x56,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x62, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x41, 0x52, 0x4e, 0x10,
	0x04, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x06, 0x22, 0xd5, 0x01, 0x0a, 0x0c, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x48, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6e, 0x69, 0x67,
	0x68, 0x74, 0x68, 0x61, 0x77, 0x6b, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7b, 0x0a, 0x13, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0b, 0x0a, 0x07,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x55, 0x4d, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x59, 0x41, 0x4d, 0x4c, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x54, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x4f, 0x52, 0x54, 0x49, 0x4f, 0x10, 0x05,
	0x12, 0x20, 0x0a, 0x1c, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c,
	0x5f, 0x46, 0x4f, 0x52, 0x54, 0x49, 0x4f, 0x5f, 0x50, 0x45, 0x44, 0x41, 0x4e, 0x54, 0x49, 0x43,
	0x10, 0x06, 0x22, 0xbf, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72,
	0x49, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x5a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x6e, 0x69,
	0x67, 0x68, 0x74, 0x68, 0x61, 0x77, 0x6b, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x64,
	0x6c, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4a, 0x0a, 0x1c, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x50, 0x49, 0x4e, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x4f, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x4c, 0x45,
	0x45, 0x50, 0x10, 0x03, 0x22, 0xc2, 0x02, 0x0a, 0x0b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x44, 0x0a,
	0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x68, 0x61, 0x77, 0x6b, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x1a, 0x81, 0x01, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x2a, 0x06, 0x18, 0xff, 0xff,
	0x03, 0x28, 0x01, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x19, 0x48, 0x31,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x75, 0x73, 0x65, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x62, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x68, 0x61,
	0x77, 0x6b, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x31, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x75, 0x73, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x2e, 0x48, 0x31, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x75, 0x73, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x41, 0x0a, 0x20, 0x48,
	0x31, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x75, 0x73, 0x65,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x4d, 0x52, 0x55, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x52, 0x55, 0x10, 0x02, 0x22, 0x80,
	0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x40, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6e, 0x69, 0x67,
	0x68, 0x74, 0x68, 0x61, 0x77, 0x6b, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x32, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x09, 0x0a, 0x05, 0x48, 0x54, 0x54, 0x50, 0x31, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x48,
	0x54, 0x54, 0x50, 0x32, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x54, 0x54, 0x50, 0x33, 0x10,
	0x02, 0x22, 0xc0, 0x1a, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x2a, 0x06, 0x18, 0xc0, 0x84, 0x3d, 0x28, 0x01,
	0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x12, 0x4b, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x2a, 0x06, 0x18, 0xc0, 0x84,
	0x3d, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x43, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0xaa, 0x01, 0x04, 0x32, 0x02, 0x10, 0x00, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0b, 0x6e, 0x6f, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x6f, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0xaa, 0x01, 0x04, 0x32, 0x02, 0x08, 0x00, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x30, 0x0a, 0x02, 0x68, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18,
	0x01, 0x48, 0x01, 0x52, 0x02, 0x68, 0x32, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x69, 0x67, 0x68,
	0x74, 0x68, 0x61, 0x77, 0x6b, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x39, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x68, 0x61, 0x77, 0x6b,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74,
	0x79, 0x52, 0x09, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0d,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x68, 0x61, 0x77, 0x6b, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x4d, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x46, 0x0a, 0x0a, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18, 0xc0, 0x84, 0x3d, 0x52, 0x09, 0x62,
	0x75, 0x72, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x68, 0x61, 0x77, 0x6b, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x12, 0x4b, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x69, 0x67, 0x68,
	0x74, 0x68, 0x61, 0x77, 0x6b, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x02, 0x52, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x68, 0x61, 0x77,
	0x6b, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x02, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x1c, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x02, 0x52, 0x19, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x62, 0x0a, 0x0b, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x65, 0x6e,
	0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x2e, 0x74, 0x6c, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x54, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a,
	0x74, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4e, 0x0a, 0x14, 0x6d, 0x61,
	0x78, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x13, 0x6d, 0x61,
	0x78, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x01, 0x52, 0x11,
	0x6d, 0x61, 0x78, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x12, 0x64, 0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x01, 0x52, 0x18, 0x6d,
	0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x17, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74,
	0x68, 0x61, 0x77, 0x6b, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x15, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x64, 0x6c, 0x65,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x30, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x03, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x42, 0x0a, 0x0c, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x68, 0x61, 0x77, 0x6b, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48,
	0x03, 0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x32,
	0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x29, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x5f, 0x68, 0x31, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x68, 0x61,
	0x77, 0x6b, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x31, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x75, 0x73, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x52, 0x25, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x48, 0x31, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x75,
	0x73, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x76, 0x0a, 0x16, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6e, 0x69, 0x67,
	0x68, 0x74, 0x68, 0x61, 0x77, 0x6b, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x6a, 0x0a, 0x12, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x68, 0x61, 0x77, 0x6b, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x37,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x6e, 0x4c, 0x6f, 0x6f, 0x70, 0x12, 0x4c, 0x0a, 0x0e, 0x6a, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0xaa,
	0x01, 0x04, 0x32, 0x02, 0x10, 0x00, 0x52, 0x0d, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x55, 0x6e,
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x49, 0x0a, 0x11, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x68, 0x61,
	0x77, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10,
	0x6e, 0x69, 0x67, 0x68, 0x74, 0x68, 0x61, 0x77, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x76, 0x0a, 0x28, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x5f, 0x68, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x24, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x48, 0x32, 0x55, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x61, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f,
	0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x2a, 0x08, 0x18, 0xff, 0xff,
	0xff, 0xff, 0x07, 0x28, 0x01, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x50, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x77, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x57, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x12, 0x43, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x73, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x6e,
	0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x69, 0x6e, 0x6b, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x73, 0x53, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x5a, 0x0a, 0x14, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x2a, 0x05, 0x18, 0xac,
	0x02, 0x28, 0x01, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x73, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x5d, 0x0a, 0x1c, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x6a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x48, 0x0a, 0x1a,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x18, 0x0a, 0x16,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x17, 0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x0b, 0x0a, 0x09, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x75, 0x72, 0x69, 0x4a, 0x04,
	0x08, 0x26, 0x10, 0x27, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_api_client_options_proto_rawDescOnce sync.Once
	file_api_client_options_proto_rawDescData = file_api_client_options_proto_rawDesc
)

func file_api_client_options_proto_rawDescGZIP() []byte {
	file_api_client_options_proto_rawDescOnce.Do(func() {
		file_api_client_options_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_client_options_proto_rawDescData)
	})
	return file_api_client_options_proto_rawDescData
}

var file_api_client_options_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_api_client_options_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_api_client_options_proto_goTypes = []interface{}{
	(AddressFamily_AddressFamilyOptions)(0),                         // 0: nighthawk.client.AddressFamily.AddressFamilyOptions
	(Verbosity_VerbosityOptions)(0),                                 // 1: nighthawk.client.Verbosity.VerbosityOptions
	(OutputFormat_OutputFormatOptions)(0),                           // 2: nighthawk.client.OutputFormat.OutputFormatOptions
	(SequencerIdleStrategy_SequencerIdleStrategyOptions)(0),         // 3: nighthawk.client.SequencerIdleStrategy.SequencerIdleStrategyOptions
	(H1ConnectionReuseStrategy_H1ConnectionReuseStrategyOptions)(0), // 4: nighthawk.client.H1ConnectionReuseStrategy.H1ConnectionReuseStrategyOptions
	(Protocol_ProtocolOptions)(0),                                   // 5: nighthawk.client.Protocol.ProtocolOptions
	(*RequestOptions)(nil),                                          // 6: nighthawk.client.RequestOptions
	(*RequestOptionsList)(nil),                                      // 7: nighthawk.client.RequestOptionsList
	(*RequestSource)(nil),                                           // 8: nighthawk.client.RequestSource
	(*AddressFamily)(nil),                                           // 9: nighthawk.client.AddressFamily
	(*Verbosity)(nil),                                               // 10: nighthawk.client.Verbosity
	(*OutputFormat)(nil),                                            // 11: nighthawk.client.OutputFormat
	(*SequencerIdleStrategy)(nil),                                   // 12: nighthawk.client.SequencerIdleStrategy
	(*MultiTarget)(nil),                                             // 13: nighthawk.client.MultiTarget
	(*H1ConnectionReuseStrategy)(nil),                               // 14: nighthawk.client.H1ConnectionReuseStrategy
	(*Protocol)(nil),                                                // 15: nighthawk.client.Protocol
	(*CommandLineOptions)(nil),                                      // 16: nighthawk.client.CommandLineOptions
	(*MultiTarget_Endpoint)(nil),                                    // 17: nighthawk.client.MultiTarget.Endpoint
	nil,                                                             // 18: nighthawk.client.CommandLineOptions.TerminationPredicatesEntry
	nil,                                                             // 19: nighthawk.client.CommandLineOptions.FailurePredicatesEntry
	(v3.RequestMethod)(0),                                           // 20: envoy.config.core.v3.RequestMethod
	(*v3.HeaderValueOption)(nil),                                    // 21: envoy.config.core.v3.HeaderValueOption
	(*wrapperspb.UInt32Value)(nil),                                  // 22: google.protobuf.UInt32Value
	(*wrapperspb.BoolValue)(nil),                                    // 23: google.protobuf.BoolValue
	(*wrapperspb.StringValue)(nil),                                  // 24: google.protobuf.StringValue
	(*durationpb.Duration)(nil),                                     // 25: google.protobuf.Duration
	(*v3.TypedExtensionConfig)(nil),                                 // 26: envoy.config.core.v3.TypedExtensionConfig
	(*v31.UpstreamTlsContext)(nil),                                  // 27: envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
	(*v3.TransportSocket)(nil),                                      // 28: envoy.config.core.v3.TransportSocket
	(*v32.StatsSink)(nil),                                           // 29: envoy.config.metrics.v3.StatsSink
	(*timestamppb.Timestamp)(nil),                                   // 30: google.protobuf.Timestamp
}
var file_api_client_options_proto_depIdxs = []int32{
	20, // 0: nighthawk.client.RequestOptions.request_method:type_name -> envoy.config.core.v3.RequestMethod
	21, // 1: nighthawk.client.RequestOptions.request_headers:type_name -> envoy.config.core.v3.HeaderValueOption
	22, // 2: nighthawk.client.RequestOptions.request_body_size:type_name -> google.protobuf.UInt32Value
	6,  // 3: nighthawk.client.RequestOptionsList.options:type_name -> nighthawk.client.RequestOptions
	0,  // 4: nighthawk.client.AddressFamily.value:type_name -> nighthawk.client.AddressFamily.AddressFamilyOptions
	1,  // 5: nighthawk.client.Verbosity.value:type_name -> nighthawk.client.Verbosity.VerbosityOptions
	2,  // 6: nighthawk.client.OutputFormat.value:type_name -> nighthawk.client.OutputFormat.OutputFormatOptions
	3,  // 7: nighthawk.client.SequencerIdleStrategy.value:type_name -> nighthawk.client.SequencerIdleStrategy.SequencerIdleStrategyOptions
	23, // 8: nighthawk.client.MultiTarget.use_https:type_name -> google.protobuf.BoolValue
	17, // 9: nighthawk.client.MultiTarget.endpoints:type_name -> nighthawk.client.MultiTarget.Endpoint
	24, // 10: nighthawk.client.MultiTarget.path:type_name -> google.protobuf.StringValue
	4,  // 11: nighthawk.client.H1ConnectionReuseStrategy.value:type_name -> nighthawk.client.H1ConnectionReuseStrategy.H1ConnectionReuseStrategyOptions
	5,  // 12: nighthawk.client.Protocol.value:type_name -> nighthawk.client.Protocol.ProtocolOptions
	22, // 13: nighthawk.client.CommandLineOptions.requests_per_second:type_name -> google.protobuf.UInt32Value
	22, // 14: nighthawk.client.CommandLineOptions.connections:type_name -> google.protobuf.UInt32Value
	25, // 15: nighthawk.client.CommandLineOptions.duration:type_name -> google.protobuf.Duration
	23, // 16: nighthawk.client.CommandLineOptions.no_duration:type_name -> google.protobuf.BoolValue
	25, // 17: nighthawk.client.CommandLineOptions.timeout:type_name -> google.protobuf.Duration
	23, // 18: nighthawk.client.CommandLineOptions.h2:type_name -> google.protobuf.BoolValue
	15, // 19: nighthawk.client.CommandLineOptions.protocol:type_name -> nighthawk.client.Protocol
	24, // 20: nighthawk.client.CommandLineOptions.concurrency:type_name -> google.protobuf.StringValue
	10, // 21: nighthawk.client.CommandLineOptions.verbosity:type_name -> nighthawk.client.Verbosity
	11, // 22: nighthawk.client.CommandLineOptions.output_format:type_name -> nighthawk.client.OutputFormat
	23, // 23: nighthawk.client.CommandLineOptions.prefetch_connections:type_name -> google.protobuf.BoolValue
	22, // 24: nighthawk.client.CommandLineOptions.burst_size:type_name -> google.protobuf.UInt32Value
	9,  // 25: nighthawk.client.CommandLineOptions.address_family:type_name -> nighthawk.client.AddressFamily
	6,  // 26: nighthawk.client.CommandLineOptions.request_options:type_name -> nighthawk.client.RequestOptions
	8,  // 27: nighthawk.client.CommandLineOptions.request_source:type_name -> nighthawk.client.RequestSource
	26, // 28: nighthawk.client.CommandLineOptions.request_source_plugin_config:type_name -> envoy.config.core.v3.TypedExtensionConfig
	27, // 29: nighthawk.client.CommandLineOptions.tls_context:type_name -> envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
	22, // 30: nighthawk.client.CommandLineOptions.max_pending_requests:type_name -> google.protobuf.UInt32Value
	22, // 31: nighthawk.client.CommandLineOptions.max_active_requests:type_name -> google.protobuf.UInt32Value
	22, // 32: nighthawk.client.CommandLineOptions.max_requests_per_connection:type_name -> google.protobuf.UInt32Value
	12, // 33: nighthawk.client.CommandLineOptions.sequencer_idle_strategy:type_name -> nighthawk.client.SequencerIdleStrategy
	24, // 34: nighthawk.client.CommandLineOptions.uri:type_name -> google.protobuf.StringValue
	13, // 35: nighthawk.client.CommandLineOptions.multi_target:type_name -> nighthawk.client.MultiTarget
	24, // 36: nighthawk.client.CommandLineOptions.trace:type_name -> google.protobuf.StringValue
	14, // 37: nighthawk.client.CommandLineOptions.experimental_h1_connection_reuse_strategy:type_name -> nighthawk.client.H1ConnectionReuseStrategy
	18, // 38: nighthawk.client.CommandLineOptions.termination_predicates:type_name -> nighthawk.client.CommandLineOptions.TerminationPredicatesEntry
	19, // 39: nighthawk.client.CommandLineOptions.failure_predicates:type_name -> nighthawk.client.CommandLineOptions.FailurePredicatesEntry
	23, // 40: nighthawk.client.CommandLineOptions.open_loop:type_name -> google.protobuf.BoolValue
	25, // 41: nighthawk.client.CommandLineOptions.jitter_uniform:type_name -> google.protobuf.Duration
	24, // 42: nighthawk.client.CommandLineOptions.nighthawk_service:type_name -> google.protobuf.StringValue
	23, // 43: nighthawk.client.CommandLineOptions.experimental_h2_use_multiple_connections:type_name -> google.protobuf.BoolValue
	22, // 44: nighthawk.client.CommandLineOptions.max_concurrent_streams:type_name -> google.protobuf.UInt32Value
	28, // 45: nighthawk.client.CommandLineOptions.transport_socket:type_name -> envoy.config.core.v3.TransportSocket
	23, // 46: nighthawk.client.CommandLineOptions.simple_warmup:type_name -> google.protobuf.BoolValue
	29, // 47: nighthawk.client.CommandLineOptions.stats_sinks:type_name -> envoy.config.metrics.v3.StatsSink
	22, // 48: nighthawk.client.CommandLineOptions.stats_flush_interval:type_name -> google.protobuf.UInt32Value
	24, // 49: nighthawk.client.CommandLineOptions.latency_response_header_name:type_name -> google.protobuf.StringValue
	30, // 50: nighthawk.client.CommandLineOptions.scheduled_start:type_name -> google.protobuf.Timestamp
	24, // 51: nighthawk.client.CommandLineOptions.execution_id:type_name -> google.protobuf.StringValue
	24, // 52: nighthawk.client.MultiTarget.Endpoint.address:type_name -> google.protobuf.StringValue
	22, // 53: nighthawk.client.MultiTarget.Endpoint.port:type_name -> google.protobuf.UInt32Value
	54, // [54:54] is the sub-list for method output_type
	54, // [54:54] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_api_client_options_proto_init() }
func file_api_client_options_proto_init() {
	if File_api_client_options_proto != nil {
		return
	}
	// TODO: find these function definitions
	//file_envoy_config_core_v3_base_proto_init()
	//file_envoy_config_metrics_v3_stats_proto_init()
	//file_envoy_extensions_transport_sockets_tls_v3_cert_proto_init()
	//file_envoy_config_core_v3_extension_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_client_options_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_client_options_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestOptionsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_client_options_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_client_options_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressFamily); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_client_options_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Verbosity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_client_options_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_client_options_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SequencerIdleStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_client_options_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_client_options_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*H1ConnectionReuseStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_client_options_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Protocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_client_options_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandLineOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_client_options_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiTarget_Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_client_options_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*CommandLineOptions_Duration)(nil),
		(*CommandLineOptions_NoDuration)(nil),
		(*CommandLineOptions_H2)(nil),
		(*CommandLineOptions_Protocol)(nil),
		(*CommandLineOptions_RequestOptions)(nil),
		(*CommandLineOptions_RequestSource)(nil),
		(*CommandLineOptions_RequestSourcePluginConfig)(nil),
		(*CommandLineOptions_Uri)(nil),
		(*CommandLineOptions_MultiTarget)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_client_options_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_client_options_proto_goTypes,
		DependencyIndexes: file_api_client_options_proto_depIdxs,
		EnumInfos:         file_api_client_options_proto_enumTypes,
		MessageInfos:      file_api_client_options_proto_msgTypes,
	}.Build()
	File_api_client_options_proto = out.File
	file_api_client_options_proto_rawDesc = nil
	file_api_client_options_proto_goTypes = nil
	file_api_client_options_proto_depIdxs = nil
}
